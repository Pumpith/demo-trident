### Configure the demo

git clone https://github.com/pablogarciaarevalo/demo-trident
cd demo-trident
chmod 744 *
./configure_demo.sh

------------------------------------------------------------------------

 ---------------------------
| --> PPT 2		  			|
 ---------------------------

### SHOW K8S DETAILS

kubectl get nodes
kubectl get pods --all-namespaces
tridentctl version -n trident
kubectl get crds
kubectl get deployment -n trident

 ---------------------------
| --> PPT 3		  			|
 ---------------------------

### Ansible Day 0-1	DEPLOYMENT & PROVISIONING

cd ansible_playbooks/
cat day0-1.yml
ansible-playbook day0-1.yaml
cd ..

 ---------------------------
| --> PPT 4 	  			|
 ---------------------------

### Tasks to do by the IT Admin

cd examples/

./01_create_k8s_backends.sh

#### Trident moves the ONTAP's advantages to the containers and kubernetes architectures

./02_check_k8s_storageclasses.sh

 ---------------------------
| --> PPT 5 	  			|
 ---------------------------

### Tasks to do by the User or Developer

./03_create_pvc.sh


ontap> volume show -vserver svm1

 ---------------------------
| --> PPT 6 	  			|
 ---------------------------

./04_create_pods.sh

kubectl exec -it pvpod-nas1 mount | grep /data

kubectl exec -it pvpod-san1 mount | grep /data


kubectl get pods -o wide


./05_scale_pods_manually.sh
kubectl get pods -o wide

Explanation:
- All the pods with RWM PV is running regardless of the worker on which they are scheduled
- Only the pods with ROW scheduled on the worker rhel1 are running. There is a Multi-Attach error for the volume mount in the pods which are not scheduled in the worker rhel1.

Why? ReadWriteMany (RMX) access is for workers not for pods

Lesson learn:: Usually the applications need RWM or RWO access. Depends on the application. K8S need unified storage.

 ---------------------------
| --> PPT 7 	  			|
 ---------------------------

------------------------------------------------------------------------
NEW TIER APPLICATION ARCHITECTURE WITH KUBERNETES

 ---------------------------
| --> PPT 8  	    		|
 ---------------------------

Storage is not really important, the applications are. But Trident with NetApp storage provides some advantages with the ONTAP features that allow the application works better (efficiency,...)

Focus on:
- Frontend (with external data) -> RWM
- Cache (Redis) -> RWO

 ---------------------------
| --> PPT 9, 10	    		|
 ---------------------------

FRONTEND STATEFULSET READWRITEMANY


./06_create_frontend_service.sh

kubectl get pods -o wide
kubectl get pvc
kubectl get pv

kubectl scale --replicas=5 statefulset frontend
kubectl get pods -o wide


------------------------------------------------------------------------
DATABASE STATEFULSET READWRITEONCE

 ---------------------------
| --> PPT 11 	  			|
 ---------------------------

./07_create_backend_service.sh

kubectl get pods
kubectl get pvc

kubectl scale --replicas=5 statefulset mongodb
kubectl get pods 

------------------------------------------------------------------------
VOLUME IMPORT

 ---------------------------
| --> PPT 12, 13            |
 ---------------------------

GO to http://rhel6.demo.netapp.com/

./08_import_web_service.sh

kubectl get pvc -n web

# Copy the volume name to a notepad. We'll need it in the last step
# ONTAP_volume_name = "trident_" + $PVC_name
# [root@rhel3]# kubectl get pvc -n web
# NAME             STATUS   VOLUME                                   
# web-content-v1   Bound    pvc-920fef59-a5a4-4f2f-80da-9ea4e4eff42e
# ONTAP_volume_name = trident_pvc_920fef59_a5a4_4f2f_80da_9ea4e4eff42e

kubectl get all -n web

Chrome to http://192.168.0.140

kubectl scale --replicas=5 statefulset web-v1 -n web

 ---------------------------
| --> PPT 14                |
 ---------------------------

------------------------------------------------------------------------
SNAPSHOTS

 ---------------------------
| --> PPT 15                |
 ---------------------------

- Take a snapshot (K8S native)

./09_create_ondemand_snapshot.sh

ontap> snapshot show


- Browser in the .snapshot directory

kubectl exec -it web-v1-0 /bin/sh -n web 
ls -altr /usr/share/nginx/html/.snapshot
exit

------------------------------------------------------------------------
CLONE FOR STAGING

 ---------------------------
| --> PPT 16                |
 ---------------------------

./10_create_staging_web_service.sh

 ---------------------------
| --> PPT 17                |
 ---------------------------

kubectl get pv
volume clone show

Firefox to to http://192.168.0.141

./11_coding_new_website.sh

Chrome to http://192.168.0.141



------------------------------------------------------------------------
### Ansible Day 2 CONFIGURATION MANAGEMENT

 ---------------------------
| --> PPT 18 	  			|
 ---------------------------


cd ../ansible_playbooks/
vi day2.yml: 
  modify the source_volume_to_protect: <replace_here>
  
ansible-playbook day2.yaml

ontap> snapmirror show



